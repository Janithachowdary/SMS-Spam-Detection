import pandas as pd
data = pd.read_csv("/content/spam.csv", sep ='\t',header= None)
data.columns = ['label', 'text']
print(data.head(5))
# Explore Dataset
data.info()
data.describe()
print(data.head(5)) 
print(data['label'].value_counts())
data
#Check for any Nan values in dataset
data.isnull().sum()
Preprocessing the data 
import re
from nltk.stem.porter import PorterStemmer
from nltk.stem import WordNetLemmatizer
from nltk.corpus import stopwords
stem = PorterStemmer()
#lemmatizer = WordNetLemmatizer()
corpus = []
for i in range(0,len(data)):
 review = re.sub('[^a-zA-z]', ' ', data['text'][i])
 review = review.lower()
 review = review.split()
 review = ' '.join(review)
 corpus.append(review)
# Convert all the words into vector's using "Bag of words" ngram
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=2500 , ngram_range=(3, 3)) 
X = cv.fit_transform(corpus).toarray()
y=pd.get_dummies(data['label'])
y=y.iloc[:,1].values
# Train the model 
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, 
random_state = 0)
# Training model using Naive bayes classifier
from sklearn.naive_bayes import MultinomialNB
spam_detect_model = MultinomialNB().fit(X_train, y_train)
y_pred=spam_detect_model.predict(X_test)
from sklearn.metrics import confusion_matrix, accuracsy_score
confusion_m = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test,y_pred)
print("Confusion metrix is \n ", confusion_m)
print(f' accuracy is %0.3f',accuracy)
from sklearn.metrics import precision_score, recall_score, f1_score
# calculate precision, recall, and F1 score
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)
